
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000b30  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000dbc  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000063e  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 81 05 	call	0xb02	; 0xb02 <main>
  7a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_EnuInit>:
#include"DIO_Private.h"
#include"DIO_Config.h"
/*******************************************************************************/

/*************************** INITAL DIO ****************************************/
ES_t DIO_EnuInit(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Errorstate=ES_NOK;
  8c:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_Pin7_Dir,PA_Pin6_Dir,PA_Pin5_Dir,PA_Pin4_Dir,PA_Pin3_Dir,PA_Pin2_Dir,PA_Pin1_Dir,PA_Pin0_Dir);
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	80 83       	st	Z, r24
	DDRB = CONC(PB_Pin7_Dir,PB_Pin6_Dir,PB_Pin5_Dir,PB_Pin4_Dir,PB_Pin3_Dir,PB_Pin2_Dir,PB_Pin1_Dir,PB_Pin0_Dir);
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
	DDRC = CONC(PC_Pin7_Dir,PC_Pin6_Dir,PC_Pin5_Dir,PC_Pin4_Dir,PC_Pin3_Dir,PC_Pin2_Dir,PC_Pin1_Dir,PC_Pin0_Dir);
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	80 83       	st	Z, r24
	DDRD = CONC(PD_Pin7_Dir,PD_Pin6_Dir,PD_Pin5_Dir,PD_Pin4_Dir,PD_Pin3_Dir,PD_Pin2_Dir,PD_Pin1_Dir,PD_Pin0_Dir);
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1


	PORTA = CONC(PA_Pin7_VAL,PA_Pin6_VAL,PA_Pin5_VAL,PA_Pin4_VAL,PA_Pin3_VAL,PA_Pin2_VAL,PA_Pin1_VAL,PA_Pin0_VAL);
  ac:	eb e3       	ldi	r30, 0x3B	; 59
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	80 83       	st	Z, r24
	PORTB = CONC(PB_Pin7_VAL,PB_Pin6_VAL,PB_Pin5_VAL,PB_Pin4_VAL,PB_Pin3_VAL,PB_Pin2_VAL,PB_Pin1_VAL,PB_Pin0_VAL);
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	PORTC = CONC(PC_Pin7_VAL,PC_Pin6_VAL,PC_Pin5_VAL,PC_Pin4_VAL,PC_Pin3_VAL,PC_Pin2_VAL,PC_Pin1_VAL,PC_Pin0_VAL);
  ba:	e5 e3       	ldi	r30, 0x35	; 53
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	PORTD = CONC(PD_Pin7_VAL,PD_Pin6_VAL,PD_Pin5_VAL,PD_Pin4_VAL,PD_Pin3_VAL,PD_Pin2_VAL,PD_Pin1_VAL,PD_Pin0_VAL);
  c0:	e2 e3       	ldi	r30, 0x32	; 50
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	80 83       	st	Z, r24

	Local_u8Errorstate=ES_OK;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Errorstate;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
}
  ce:	0f 90       	pop	r0
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <DIO_EnuSetPortDirection>:

/*******************************************************************************/

/*************************** CONTROL PORTS *************************************/
ES_t DIO_EnuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value){
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	00 d0       	rcall	.+0      	; 0xdc <DIO_EnuSetPortDirection+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <DIO_EnuSetPortDirection+0x8>
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	8a 83       	std	Y+2, r24	; 0x02
  e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
  e8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	85 34       	cpi	r24, 0x45	; 69
  ee:	b0 f5       	brcc	.+108    	; 0x15c <DIO_EnuSetPortDirection+0x86>
	{
		switch(Copy_u8PortID)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	3d 83       	std	Y+5, r19	; 0x05
  f8:	2c 83       	std	Y+4, r18	; 0x04
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	82 34       	cpi	r24, 0x42	; 66
 100:	91 05       	cpc	r25, r1
 102:	d9 f0       	breq	.+54     	; 0x13a <DIO_EnuSetPortDirection+0x64>
 104:	2c 81       	ldd	r18, Y+4	; 0x04
 106:	3d 81       	ldd	r19, Y+5	; 0x05
 108:	23 34       	cpi	r18, 0x43	; 67
 10a:	31 05       	cpc	r19, r1
 10c:	34 f4       	brge	.+12     	; 0x11a <DIO_EnuSetPortDirection+0x44>
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	9d 81       	ldd	r25, Y+5	; 0x05
 112:	81 34       	cpi	r24, 0x41	; 65
 114:	91 05       	cpc	r25, r1
 116:	61 f0       	breq	.+24     	; 0x130 <DIO_EnuSetPortDirection+0x5a>
 118:	1e c0       	rjmp	.+60     	; 0x156 <DIO_EnuSetPortDirection+0x80>
 11a:	2c 81       	ldd	r18, Y+4	; 0x04
 11c:	3d 81       	ldd	r19, Y+5	; 0x05
 11e:	23 34       	cpi	r18, 0x43	; 67
 120:	31 05       	cpc	r19, r1
 122:	81 f0       	breq	.+32     	; 0x144 <DIO_EnuSetPortDirection+0x6e>
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	84 34       	cpi	r24, 0x44	; 68
 12a:	91 05       	cpc	r25, r1
 12c:	81 f0       	breq	.+32     	; 0x14e <DIO_EnuSetPortDirection+0x78>
 12e:	13 c0       	rjmp	.+38     	; 0x156 <DIO_EnuSetPortDirection+0x80>
		{
			case 'A':
					DDRA=Copy_u8Value;
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	80 83       	st	Z, r24
 138:	0e c0       	rjmp	.+28     	; 0x156 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'B':
					DDRB=Copy_u8Value;
 13a:	e7 e3       	ldi	r30, 0x37	; 55
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	09 c0       	rjmp	.+18     	; 0x156 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'C':
					DDRC=Copy_u8Value;
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
 14c:	04 c0       	rjmp	.+8      	; 0x156 <DIO_EnuSetPortDirection+0x80>
					break;
			case 'D':
					DDRD=Copy_u8Value;
 14e:	e1 e3       	ldi	r30, 0x31	; 49
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	89 83       	std	Y+1, r24	; 0x01
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_EnuSetPortDirection+0x8a>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <DIO_EnuSetPortValue>:

/*******************************************************************************/

ES_t DIO_EnuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value){
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_EnuSetPortValue+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_EnuSetPortValue+0x8>
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	8a 83       	std	Y+2, r24	; 0x02
 182:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
 184:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	85 34       	cpi	r24, 0x45	; 69
 18a:	b0 f5       	brcc	.+108    	; 0x1f8 <DIO_EnuSetPortValue+0x86>
	{
		switch(Copy_u8PortID)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3d 83       	std	Y+5, r19	; 0x05
 194:	2c 83       	std	Y+4, r18	; 0x04
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	82 34       	cpi	r24, 0x42	; 66
 19c:	91 05       	cpc	r25, r1
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <DIO_EnuSetPortValue+0x64>
 1a0:	2c 81       	ldd	r18, Y+4	; 0x04
 1a2:	3d 81       	ldd	r19, Y+5	; 0x05
 1a4:	23 34       	cpi	r18, 0x43	; 67
 1a6:	31 05       	cpc	r19, r1
 1a8:	34 f4       	brge	.+12     	; 0x1b6 <DIO_EnuSetPortValue+0x44>
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	91 05       	cpc	r25, r1
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_EnuSetPortValue+0x5a>
 1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <DIO_EnuSetPortValue+0x80>
 1b6:	2c 81       	ldd	r18, Y+4	; 0x04
 1b8:	3d 81       	ldd	r19, Y+5	; 0x05
 1ba:	23 34       	cpi	r18, 0x43	; 67
 1bc:	31 05       	cpc	r19, r1
 1be:	81 f0       	breq	.+32     	; 0x1e0 <DIO_EnuSetPortValue+0x6e>
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	9d 81       	ldd	r25, Y+5	; 0x05
 1c4:	84 34       	cpi	r24, 0x44	; 68
 1c6:	91 05       	cpc	r25, r1
 1c8:	81 f0       	breq	.+32     	; 0x1ea <DIO_EnuSetPortValue+0x78>
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <DIO_EnuSetPortValue+0x80>
		{
			case 'A':
					PORTA=Copy_u8Value;
 1cc:	eb e3       	ldi	r30, 0x3B	; 59
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	80 83       	st	Z, r24
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <DIO_EnuSetPortValue+0x80>
					break;
			case 'B':
					PORTB=Copy_u8Value;
 1d6:	e8 e3       	ldi	r30, 0x38	; 56
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 83       	st	Z, r24
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <DIO_EnuSetPortValue+0x80>
					break;
			case 'C':
					PORTC=Copy_u8Value;
 1e0:	e5 e3       	ldi	r30, 0x35	; 53
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	80 83       	st	Z, r24
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <DIO_EnuSetPortValue+0x80>
					break;
			case 'D':
					PORTD=Copy_u8Value;
 1ea:	e2 e3       	ldi	r30, 0x32	; 50
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	80 83       	st	Z, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_EnuSetPortValue+0x8a>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	cf 91       	pop	r28
 20a:	df 91       	pop	r29
 20c:	08 95       	ret

0000020e <DIO_EnuTogPort>:

/*******************************************************************************/

ES_t DIO_EnuTogPort(u8 Copy_u8PortID){
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_EnuTogPort+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <DIO_EnuTogPort+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Errorstate=ES_NOK;
 21c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD)
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	85 34       	cpi	r24, 0x45	; 69
 222:	08 f0       	brcs	.+2      	; 0x226 <DIO_EnuTogPort+0x18>
 224:	42 c0       	rjmp	.+132    	; 0x2aa <DIO_EnuTogPort+0x9c>
	{
		switch(Copy_u8PortID)
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	3c 83       	std	Y+4, r19	; 0x04
 22e:	2b 83       	std	Y+3, r18	; 0x03
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	82 34       	cpi	r24, 0x42	; 66
 236:	91 05       	cpc	r25, r1
 238:	f1 f0       	breq	.+60     	; 0x276 <DIO_EnuTogPort+0x68>
 23a:	2b 81       	ldd	r18, Y+3	; 0x03
 23c:	3c 81       	ldd	r19, Y+4	; 0x04
 23e:	23 34       	cpi	r18, 0x43	; 67
 240:	31 05       	cpc	r19, r1
 242:	34 f4       	brge	.+12     	; 0x250 <DIO_EnuTogPort+0x42>
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	81 34       	cpi	r24, 0x41	; 65
 24a:	91 05       	cpc	r25, r1
 24c:	61 f0       	breq	.+24     	; 0x266 <DIO_EnuTogPort+0x58>
 24e:	2a c0       	rjmp	.+84     	; 0x2a4 <DIO_EnuTogPort+0x96>
 250:	2b 81       	ldd	r18, Y+3	; 0x03
 252:	3c 81       	ldd	r19, Y+4	; 0x04
 254:	23 34       	cpi	r18, 0x43	; 67
 256:	31 05       	cpc	r19, r1
 258:	b1 f0       	breq	.+44     	; 0x286 <DIO_EnuTogPort+0x78>
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	9c 81       	ldd	r25, Y+4	; 0x04
 25e:	84 34       	cpi	r24, 0x44	; 68
 260:	91 05       	cpc	r25, r1
 262:	c9 f0       	breq	.+50     	; 0x296 <DIO_EnuTogPort+0x88>
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <DIO_EnuTogPort+0x96>
		{
			case 'A':
					PORTA=~PORTA;
 266:	ab e3       	ldi	r26, 0x3B	; 59
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	eb e3       	ldi	r30, 0x3B	; 59
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 95       	com	r24
 272:	8c 93       	st	X, r24
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <DIO_EnuTogPort+0x96>
					break;
			case 'B':
					PORTB=~PORTB;
 276:	a8 e3       	ldi	r26, 0x38	; 56
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e8 e3       	ldi	r30, 0x38	; 56
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 95       	com	r24
 282:	8c 93       	st	X, r24
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <DIO_EnuTogPort+0x96>
					break;
			case 'C':
					PORTC=~PORTC;
 286:	a5 e3       	ldi	r26, 0x35	; 53
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e5 e3       	ldi	r30, 0x35	; 53
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 95       	com	r24
 292:	8c 93       	st	X, r24
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <DIO_EnuTogPort+0x96>
					break;
			case 'D':
					PORTD=~PORTD;
 296:	a2 e3       	ldi	r26, 0x32	; 50
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e2 e3       	ldi	r30, 0x32	; 50
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	80 95       	com	r24
 2a2:	8c 93       	st	X, r24
					break;
		}
		Local_u8Errorstate=ES_OK;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_EnuTogPort+0xa0>
	}
	else
	{
		Local_u8Errorstate=ES_OUT_OF_RANGE;
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	cf 91       	pop	r28
 2ba:	df 91       	pop	r29
 2bc:	08 95       	ret

000002be <DIO_EnuGetPortValue>:

/*******************************************************************************/

ES_t DIO_EnuGetPortValue(u8 Copy_u8PortID ,u8 * Copy_u8Value){
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_EnuGetPortValue+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <DIO_EnuGetPortValue+0x8>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <DIO_EnuGetPortValue+0xa>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	8a 83       	std	Y+2, r24	; 0x02
 2ce:	7c 83       	std	Y+4, r23	; 0x04
 2d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
 2d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL)
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	9c 81       	ldd	r25, Y+4	; 0x04
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_EnuGetPortValue+0x20>
 2dc:	45 c0       	rjmp	.+138    	; 0x368 <DIO_EnuGetPortValue+0xaa>
	{
		if(Copy_u8PortID<=DIO_PORTD){
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	85 34       	cpi	r24, 0x45	; 69
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <DIO_EnuGetPortValue+0x28>
 2e4:	3e c0       	rjmp	.+124    	; 0x362 <DIO_EnuGetPortValue+0xa4>
				 switch(Copy_u8PortID)
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	3e 83       	std	Y+6, r19	; 0x06
 2ee:	2d 83       	std	Y+5, r18	; 0x05
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	82 34       	cpi	r24, 0x42	; 66
 2f6:	91 05       	cpc	r25, r1
 2f8:	e9 f0       	breq	.+58     	; 0x334 <DIO_EnuGetPortValue+0x76>
 2fa:	2d 81       	ldd	r18, Y+5	; 0x05
 2fc:	3e 81       	ldd	r19, Y+6	; 0x06
 2fe:	23 34       	cpi	r18, 0x43	; 67
 300:	31 05       	cpc	r19, r1
 302:	34 f4       	brge	.+12     	; 0x310 <DIO_EnuGetPortValue+0x52>
 304:	8d 81       	ldd	r24, Y+5	; 0x05
 306:	9e 81       	ldd	r25, Y+6	; 0x06
 308:	81 34       	cpi	r24, 0x41	; 65
 30a:	91 05       	cpc	r25, r1
 30c:	61 f0       	breq	.+24     	; 0x326 <DIO_EnuGetPortValue+0x68>
 30e:	26 c0       	rjmp	.+76     	; 0x35c <DIO_EnuGetPortValue+0x9e>
 310:	2d 81       	ldd	r18, Y+5	; 0x05
 312:	3e 81       	ldd	r19, Y+6	; 0x06
 314:	23 34       	cpi	r18, 0x43	; 67
 316:	31 05       	cpc	r19, r1
 318:	a1 f0       	breq	.+40     	; 0x342 <DIO_EnuGetPortValue+0x84>
 31a:	8d 81       	ldd	r24, Y+5	; 0x05
 31c:	9e 81       	ldd	r25, Y+6	; 0x06
 31e:	84 34       	cpi	r24, 0x44	; 68
 320:	91 05       	cpc	r25, r1
 322:	b1 f0       	breq	.+44     	; 0x350 <DIO_EnuGetPortValue+0x92>
 324:	1b c0       	rjmp	.+54     	; 0x35c <DIO_EnuGetPortValue+0x9e>
				 {
					case 'A':
							*Copy_u8Value=PINA;
 326:	e9 e3       	ldi	r30, 0x39	; 57
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	eb 81       	ldd	r30, Y+3	; 0x03
 32e:	fc 81       	ldd	r31, Y+4	; 0x04
 330:	80 83       	st	Z, r24
 332:	14 c0       	rjmp	.+40     	; 0x35c <DIO_EnuGetPortValue+0x9e>
							break;
					case 'B':
							*Copy_u8Value=PINB;
 334:	e6 e3       	ldi	r30, 0x36	; 54
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	eb 81       	ldd	r30, Y+3	; 0x03
 33c:	fc 81       	ldd	r31, Y+4	; 0x04
 33e:	80 83       	st	Z, r24
 340:	0d c0       	rjmp	.+26     	; 0x35c <DIO_EnuGetPortValue+0x9e>
							break;
					case 'C':
							*Copy_u8Value=PINC;
 342:	e3 e3       	ldi	r30, 0x33	; 51
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	eb 81       	ldd	r30, Y+3	; 0x03
 34a:	fc 81       	ldd	r31, Y+4	; 0x04
 34c:	80 83       	st	Z, r24
 34e:	06 c0       	rjmp	.+12     	; 0x35c <DIO_EnuGetPortValue+0x9e>
							break;
					case 'D':
							*Copy_u8Value=PIND;
 350:	e0 e3       	ldi	r30, 0x30	; 48
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	eb 81       	ldd	r30, Y+3	; 0x03
 358:	fc 81       	ldd	r31, Y+4	; 0x04
 35a:	80 83       	st	Z, r24
							break;
				 }
				 Local_u8Errorstate=ES_OK;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	05 c0       	rjmp	.+10     	; 0x36c <DIO_EnuGetPortValue+0xae>
			}
		else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_EnuGetPortValue+0xae>
		    }
	}
	else
	{
		Local_u8Errorstate=ES_PNULL;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
 36c:	89 81       	ldd	r24, Y+1	; 0x01
}
 36e:	26 96       	adiw	r28, 0x06	; 6
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <DIO_EnuSetPinDirection>:
/*******************************************************************************/
/*******************************************************************************/


/*************************** CONTROL PINS *************************************/
ES_t DIO_EnuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID ,u8 Copy_u8Value){
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	00 d0       	rcall	.+0      	; 0x386 <DIO_EnuSetPinDirection+0x6>
 386:	00 d0       	rcall	.+0      	; 0x388 <DIO_EnuSetPinDirection+0x8>
 388:	00 d0       	rcall	.+0      	; 0x38a <DIO_EnuSetPinDirection+0xa>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	8a 83       	std	Y+2, r24	; 0x02
 390:	6b 83       	std	Y+3, r22	; 0x03
 392:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Errorstate=ES_NOK;
 394:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7 && Copy_u8Value<=OUTPUT)
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	85 34       	cpi	r24, 0x45	; 69
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_EnuSetPinDirection+0x1e>
 39c:	d1 c0       	rjmp	.+418    	; 0x540 <DIO_EnuSetPinDirection+0x1c0>
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 30       	cpi	r24, 0x08	; 8
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <DIO_EnuSetPinDirection+0x26>
 3a4:	cd c0       	rjmp	.+410    	; 0x540 <DIO_EnuSetPinDirection+0x1c0>
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <DIO_EnuSetPinDirection+0x2e>
 3ac:	c9 c0       	rjmp	.+402    	; 0x540 <DIO_EnuSetPinDirection+0x1c0>
		{
					 switch(Copy_u8PortID)
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3e 83       	std	Y+6, r19	; 0x06
 3b6:	2d 83       	std	Y+5, r18	; 0x05
 3b8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ba:	7e 81       	ldd	r23, Y+6	; 0x06
 3bc:	62 34       	cpi	r22, 0x42	; 66
 3be:	71 05       	cpc	r23, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_EnuSetPinDirection+0x44>
 3c2:	41 c0       	rjmp	.+130    	; 0x446 <DIO_EnuSetPinDirection+0xc6>
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	83 34       	cpi	r24, 0x43	; 67
 3ca:	91 05       	cpc	r25, r1
 3cc:	34 f4       	brge	.+12     	; 0x3da <DIO_EnuSetPinDirection+0x5a>
 3ce:	2d 81       	ldd	r18, Y+5	; 0x05
 3d0:	3e 81       	ldd	r19, Y+6	; 0x06
 3d2:	21 34       	cpi	r18, 0x41	; 65
 3d4:	31 05       	cpc	r19, r1
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <DIO_EnuSetPinDirection+0x74>
 3d8:	b0 c0       	rjmp	.+352    	; 0x53a <DIO_EnuSetPinDirection+0x1ba>
 3da:	6d 81       	ldd	r22, Y+5	; 0x05
 3dc:	7e 81       	ldd	r23, Y+6	; 0x06
 3de:	63 34       	cpi	r22, 0x43	; 67
 3e0:	71 05       	cpc	r23, r1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <DIO_EnuSetPinDirection+0x66>
 3e4:	59 c0       	rjmp	.+178    	; 0x498 <DIO_EnuSetPinDirection+0x118>
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ea:	84 34       	cpi	r24, 0x44	; 68
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_EnuSetPinDirection+0x72>
 3f0:	7c c0       	rjmp	.+248    	; 0x4ea <DIO_EnuSetPinDirection+0x16a>
 3f2:	a3 c0       	rjmp	.+326    	; 0x53a <DIO_EnuSetPinDirection+0x1ba>
					 {
						case 'A':
								CLR_BIT(DDRA,Copy_u8PinID);
 3f4:	aa e3       	ldi	r26, 0x3A	; 58
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	ea e3       	ldi	r30, 0x3A	; 58
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_EnuSetPinDirection+0x90>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	2a 95       	dec	r18
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_EnuSetPinDirection+0x8c>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
								DDRA|=(Copy_u8Value<<Copy_u8PinID);
 41a:	aa e3       	ldi	r26, 0x3A	; 58
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	ea e3       	ldi	r30, 0x3A	; 58
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_EnuSetPinDirection+0xba>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_EnuSetPinDirection+0xb6>
 43e:	cb 01       	movw	r24, r22
 440:	84 2b       	or	r24, r20
 442:	8c 93       	st	X, r24
 444:	7a c0       	rjmp	.+244    	; 0x53a <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'B':
								CLR_BIT(DDRB,Copy_u8PinID);
 446:	a7 e3       	ldi	r26, 0x37	; 55
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_EnuSetPinDirection+0xe2>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	2a 95       	dec	r18
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_EnuSetPinDirection+0xde>
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	8c 93       	st	X, r24
								DDRB|=(Copy_u8Value<<Copy_u8PinID);
 46c:	a7 e3       	ldi	r26, 0x37	; 55
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	e7 e3       	ldi	r30, 0x37	; 55
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 2f       	mov	r24, r24
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_EnuSetPinDirection+0x10c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_EnuSetPinDirection+0x108>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
 496:	51 c0       	rjmp	.+162    	; 0x53a <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'C':
								CLR_BIT(DDRC,Copy_u8PinID);
 498:	a4 e3       	ldi	r26, 0x34	; 52
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e4 e3       	ldi	r30, 0x34	; 52
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_EnuSetPinDirection+0x134>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	2a 95       	dec	r18
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_EnuSetPinDirection+0x130>
 4b8:	80 95       	com	r24
 4ba:	84 23       	and	r24, r20
 4bc:	8c 93       	st	X, r24
								DDRC|=(Copy_u8Value<<Copy_u8PinID);
 4be:	a4 e3       	ldi	r26, 0x34	; 52
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e4 e3       	ldi	r30, 0x34	; 52
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8c 81       	ldd	r24, Y+4	; 0x04
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_EnuSetPinDirection+0x15e>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_EnuSetPinDirection+0x15a>
 4e2:	cb 01       	movw	r24, r22
 4e4:	84 2b       	or	r24, r20
 4e6:	8c 93       	st	X, r24
 4e8:	28 c0       	rjmp	.+80     	; 0x53a <DIO_EnuSetPinDirection+0x1ba>
								break;
						case 'D':
								CLR_BIT(DDRD,Copy_u8PinID);
 4ea:	a1 e3       	ldi	r26, 0x31	; 49
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	e1 e3       	ldi	r30, 0x31	; 49
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	48 2f       	mov	r20, r24
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_EnuSetPinDirection+0x186>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	2a 95       	dec	r18
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_EnuSetPinDirection+0x182>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24
								DDRD|=(Copy_u8Value<<Copy_u8PinID);
 510:	a1 e3       	ldi	r26, 0x31	; 49
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e1 e3       	ldi	r30, 0x31	; 49
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8c 81       	ldd	r24, Y+4	; 0x04
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_EnuSetPinDirection+0x1b0>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_EnuSetPinDirection+0x1ac>
 534:	cb 01       	movw	r24, r22
 536:	84 2b       	or	r24, r20
 538:	8c 93       	st	X, r24
								break;
					 }
					 Local_u8Errorstate=ES_OK;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_EnuSetPinDirection+0x1c4>
			}
	else {
				Local_u8Errorstate=ES_OUT_OF_RANGE;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	89 83       	std	Y+1, r24	; 0x01
	    }

	return Local_u8Errorstate;
 544:	89 81       	ldd	r24, Y+1	; 0x01
}
 546:	26 96       	adiw	r28, 0x06	; 6
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <DIO_EnuSetPinortValue>:

/*******************************************************************************/

ES_t DIO_EnuSetPinortValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value){
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	00 d0       	rcall	.+0      	; 0x55e <DIO_EnuSetPinortValue+0x6>
 55e:	00 d0       	rcall	.+0      	; 0x560 <DIO_EnuSetPinortValue+0x8>
 560:	00 d0       	rcall	.+0      	; 0x562 <DIO_EnuSetPinortValue+0xa>
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	8a 83       	std	Y+2, r24	; 0x02
 568:	6b 83       	std	Y+3, r22	; 0x03
 56a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Errorstate=ES_NOK;
 56c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7 && Copy_u8Value<=OUTPUT)
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	85 34       	cpi	r24, 0x45	; 69
 572:	08 f0       	brcs	.+2      	; 0x576 <DIO_EnuSetPinortValue+0x1e>
 574:	d1 c0       	rjmp	.+418    	; 0x718 <DIO_EnuSetPinortValue+0x1c0>
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	08 f0       	brcs	.+2      	; 0x57e <DIO_EnuSetPinortValue+0x26>
 57c:	cd c0       	rjmp	.+410    	; 0x718 <DIO_EnuSetPinortValue+0x1c0>
 57e:	8c 81       	ldd	r24, Y+4	; 0x04
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	08 f0       	brcs	.+2      	; 0x586 <DIO_EnuSetPinortValue+0x2e>
 584:	c9 c0       	rjmp	.+402    	; 0x718 <DIO_EnuSetPinortValue+0x1c0>
		{
					 switch(Copy_u8PortID)
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	3e 83       	std	Y+6, r19	; 0x06
 58e:	2d 83       	std	Y+5, r18	; 0x05
 590:	6d 81       	ldd	r22, Y+5	; 0x05
 592:	7e 81       	ldd	r23, Y+6	; 0x06
 594:	62 34       	cpi	r22, 0x42	; 66
 596:	71 05       	cpc	r23, r1
 598:	09 f4       	brne	.+2      	; 0x59c <DIO_EnuSetPinortValue+0x44>
 59a:	41 c0       	rjmp	.+130    	; 0x61e <DIO_EnuSetPinortValue+0xc6>
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	83 34       	cpi	r24, 0x43	; 67
 5a2:	91 05       	cpc	r25, r1
 5a4:	34 f4       	brge	.+12     	; 0x5b2 <DIO_EnuSetPinortValue+0x5a>
 5a6:	2d 81       	ldd	r18, Y+5	; 0x05
 5a8:	3e 81       	ldd	r19, Y+6	; 0x06
 5aa:	21 34       	cpi	r18, 0x41	; 65
 5ac:	31 05       	cpc	r19, r1
 5ae:	71 f0       	breq	.+28     	; 0x5cc <DIO_EnuSetPinortValue+0x74>
 5b0:	b0 c0       	rjmp	.+352    	; 0x712 <DIO_EnuSetPinortValue+0x1ba>
 5b2:	6d 81       	ldd	r22, Y+5	; 0x05
 5b4:	7e 81       	ldd	r23, Y+6	; 0x06
 5b6:	63 34       	cpi	r22, 0x43	; 67
 5b8:	71 05       	cpc	r23, r1
 5ba:	09 f4       	brne	.+2      	; 0x5be <DIO_EnuSetPinortValue+0x66>
 5bc:	59 c0       	rjmp	.+178    	; 0x670 <DIO_EnuSetPinortValue+0x118>
 5be:	8d 81       	ldd	r24, Y+5	; 0x05
 5c0:	9e 81       	ldd	r25, Y+6	; 0x06
 5c2:	84 34       	cpi	r24, 0x44	; 68
 5c4:	91 05       	cpc	r25, r1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO_EnuSetPinortValue+0x72>
 5c8:	7c c0       	rjmp	.+248    	; 0x6c2 <DIO_EnuSetPinortValue+0x16a>
 5ca:	a3 c0       	rjmp	.+326    	; 0x712 <DIO_EnuSetPinortValue+0x1ba>
					 {
						case 'A':
								CLR_BIT(PORTA,Copy_u8PinID);
 5cc:	ab e3       	ldi	r26, 0x3B	; 59
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	eb e3       	ldi	r30, 0x3B	; 59
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_EnuSetPinortValue+0x90>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	2a 95       	dec	r18
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_EnuSetPinortValue+0x8c>
 5ec:	80 95       	com	r24
 5ee:	84 23       	and	r24, r20
 5f0:	8c 93       	st	X, r24
								PORTA|=(Copy_u8Value<<Copy_u8PinID);
 5f2:	ab e3       	ldi	r26, 0x3B	; 59
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	eb e3       	ldi	r30, 0x3B	; 59
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	48 2f       	mov	r20, r24
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	b9 01       	movw	r22, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_EnuSetPinortValue+0xba>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_EnuSetPinortValue+0xb6>
 616:	cb 01       	movw	r24, r22
 618:	84 2b       	or	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	7a c0       	rjmp	.+244    	; 0x712 <DIO_EnuSetPinortValue+0x1ba>
								break;
						case 'B':
								CLR_BIT(PORTB,Copy_u8PinID);
 61e:	a8 e3       	ldi	r26, 0x38	; 56
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e8 e3       	ldi	r30, 0x38	; 56
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8b 81       	ldd	r24, Y+3	; 0x03
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_EnuSetPinortValue+0xe2>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	2a 95       	dec	r18
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_EnuSetPinortValue+0xde>
 63e:	80 95       	com	r24
 640:	84 23       	and	r24, r20
 642:	8c 93       	st	X, r24
								PORTB|=(Copy_u8Value<<Copy_u8PinID);
 644:	a8 e3       	ldi	r26, 0x38	; 56
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e8 e3       	ldi	r30, 0x38	; 56
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	48 2f       	mov	r20, r24
 650:	8c 81       	ldd	r24, Y+4	; 0x04
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	b9 01       	movw	r22, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_EnuSetPinortValue+0x10c>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_EnuSetPinortValue+0x108>
 668:	cb 01       	movw	r24, r22
 66a:	84 2b       	or	r24, r20
 66c:	8c 93       	st	X, r24
 66e:	51 c0       	rjmp	.+162    	; 0x712 <DIO_EnuSetPinortValue+0x1ba>
								break;
						case 'C':
								CLR_BIT(PORTC,Copy_u8PinID);
 670:	a5 e3       	ldi	r26, 0x35	; 53
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e5 e3       	ldi	r30, 0x35	; 53
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	48 2f       	mov	r20, r24
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_EnuSetPinortValue+0x134>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	2a 95       	dec	r18
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_EnuSetPinortValue+0x130>
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	8c 93       	st	X, r24
								PORTC|=(Copy_u8Value<<Copy_u8PinID);
 696:	a5 e3       	ldi	r26, 0x35	; 53
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	e5 e3       	ldi	r30, 0x35	; 53
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8c 81       	ldd	r24, Y+4	; 0x04
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	88 2f       	mov	r24, r24
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	b9 01       	movw	r22, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_EnuSetPinortValue+0x15e>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	8a 95       	dec	r24
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_EnuSetPinortValue+0x15a>
 6ba:	cb 01       	movw	r24, r22
 6bc:	84 2b       	or	r24, r20
 6be:	8c 93       	st	X, r24
 6c0:	28 c0       	rjmp	.+80     	; 0x712 <DIO_EnuSetPinortValue+0x1ba>
								break;
						case 'D':
								CLR_BIT(PORTD,Copy_u8PinID);
 6c2:	a2 e3       	ldi	r26, 0x32	; 50
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e2 e3       	ldi	r30, 0x32	; 50
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	48 2f       	mov	r20, r24
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	28 2f       	mov	r18, r24
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_EnuSetPinortValue+0x186>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	2a 95       	dec	r18
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_EnuSetPinortValue+0x182>
 6e2:	80 95       	com	r24
 6e4:	84 23       	and	r24, r20
 6e6:	8c 93       	st	X, r24
								PORTD|=(Copy_u8Value<<Copy_u8PinID);
 6e8:	a2 e3       	ldi	r26, 0x32	; 50
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	e2 e3       	ldi	r30, 0x32	; 50
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	48 2f       	mov	r20, r24
 6f4:	8c 81       	ldd	r24, Y+4	; 0x04
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	88 2f       	mov	r24, r24
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	b9 01       	movw	r22, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_EnuSetPinortValue+0x1b0>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	8a 95       	dec	r24
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_EnuSetPinortValue+0x1ac>
 70c:	cb 01       	movw	r24, r22
 70e:	84 2b       	or	r24, r20
 710:	8c 93       	st	X, r24
								break;
					 }
				Local_u8Errorstate=ES_OK;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_EnuSetPinortValue+0x1c4>
			}
	else {
				Local_u8Errorstate=ES_OUT_OF_RANGE;
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	89 83       	std	Y+1, r24	; 0x01
	    }


	return Local_u8Errorstate;
 71c:	89 81       	ldd	r24, Y+1	; 0x01
}
 71e:	26 96       	adiw	r28, 0x06	; 6
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <DIO_EnuTogPin>:

/*******************************************************************************/

ES_t DIO_EnuTogPin(u8 Copy_u8PortID,u8 Copy_u8PinID){
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	00 d0       	rcall	.+0      	; 0x736 <DIO_EnuTogPin+0x6>
 736:	00 d0       	rcall	.+0      	; 0x738 <DIO_EnuTogPin+0x8>
 738:	0f 92       	push	r0
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	8a 83       	std	Y+2, r24	; 0x02
 740:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Errorstate=ES_NOK;
 742:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7)
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	85 34       	cpi	r24, 0x45	; 69
 748:	08 f0       	brcs	.+2      	; 0x74c <DIO_EnuTogPin+0x1c>
 74a:	76 c0       	rjmp	.+236    	; 0x838 <DIO_EnuTogPin+0x108>
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	88 30       	cpi	r24, 0x08	; 8
 750:	08 f0       	brcs	.+2      	; 0x754 <DIO_EnuTogPin+0x24>
 752:	72 c0       	rjmp	.+228    	; 0x838 <DIO_EnuTogPin+0x108>
		{
					 switch(Copy_u8PortID)
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	3d 83       	std	Y+5, r19	; 0x05
 75c:	2c 83       	std	Y+4, r18	; 0x04
 75e:	8c 81       	ldd	r24, Y+4	; 0x04
 760:	9d 81       	ldd	r25, Y+5	; 0x05
 762:	82 34       	cpi	r24, 0x42	; 66
 764:	91 05       	cpc	r25, r1
 766:	51 f1       	breq	.+84     	; 0x7bc <DIO_EnuTogPin+0x8c>
 768:	2c 81       	ldd	r18, Y+4	; 0x04
 76a:	3d 81       	ldd	r19, Y+5	; 0x05
 76c:	23 34       	cpi	r18, 0x43	; 67
 76e:	31 05       	cpc	r19, r1
 770:	34 f4       	brge	.+12     	; 0x77e <DIO_EnuTogPin+0x4e>
 772:	8c 81       	ldd	r24, Y+4	; 0x04
 774:	9d 81       	ldd	r25, Y+5	; 0x05
 776:	81 34       	cpi	r24, 0x41	; 65
 778:	91 05       	cpc	r25, r1
 77a:	61 f0       	breq	.+24     	; 0x794 <DIO_EnuTogPin+0x64>
 77c:	5a c0       	rjmp	.+180    	; 0x832 <DIO_EnuTogPin+0x102>
 77e:	2c 81       	ldd	r18, Y+4	; 0x04
 780:	3d 81       	ldd	r19, Y+5	; 0x05
 782:	23 34       	cpi	r18, 0x43	; 67
 784:	31 05       	cpc	r19, r1
 786:	71 f1       	breq	.+92     	; 0x7e4 <DIO_EnuTogPin+0xb4>
 788:	8c 81       	ldd	r24, Y+4	; 0x04
 78a:	9d 81       	ldd	r25, Y+5	; 0x05
 78c:	84 34       	cpi	r24, 0x44	; 68
 78e:	91 05       	cpc	r25, r1
 790:	e9 f1       	breq	.+122    	; 0x80c <DIO_EnuTogPin+0xdc>
 792:	4f c0       	rjmp	.+158    	; 0x832 <DIO_EnuTogPin+0x102>
					 {
						case 'A':
								TOG_BIT(PORTA,Copy_u8PinID);
 794:	ab e3       	ldi	r26, 0x3B	; 59
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	eb e3       	ldi	r30, 0x3B	; 59
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	48 2f       	mov	r20, r24
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 2e       	mov	r0, r18
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_EnuTogPin+0x82>
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	0a 94       	dec	r0
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_EnuTogPin+0x7e>
 7b6:	84 27       	eor	r24, r20
 7b8:	8c 93       	st	X, r24
 7ba:	3b c0       	rjmp	.+118    	; 0x832 <DIO_EnuTogPin+0x102>
								break;
						case 'B':
								TOG_BIT(PORTB,Copy_u8PinID);
 7bc:	a8 e3       	ldi	r26, 0x38	; 56
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	e8 e3       	ldi	r30, 0x38	; 56
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	48 2f       	mov	r20, r24
 7c8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 2e       	mov	r0, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_EnuTogPin+0xaa>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	0a 94       	dec	r0
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_EnuTogPin+0xa6>
 7de:	84 27       	eor	r24, r20
 7e0:	8c 93       	st	X, r24
 7e2:	27 c0       	rjmp	.+78     	; 0x832 <DIO_EnuTogPin+0x102>
								break;
						case 'C':
								TOG_BIT(PORTC,Copy_u8PinID);
 7e4:	a5 e3       	ldi	r26, 0x35	; 53
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	e5 e3       	ldi	r30, 0x35	; 53
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	48 2f       	mov	r20, r24
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	02 2e       	mov	r0, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_EnuTogPin+0xd2>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	0a 94       	dec	r0
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_EnuTogPin+0xce>
 806:	84 27       	eor	r24, r20
 808:	8c 93       	st	X, r24
 80a:	13 c0       	rjmp	.+38     	; 0x832 <DIO_EnuTogPin+0x102>
								break;
						case 'D':
								TOG_BIT(PORTD,Copy_u8PinID);
 80c:	a2 e3       	ldi	r26, 0x32	; 50
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	e2 e3       	ldi	r30, 0x32	; 50
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	48 2f       	mov	r20, r24
 818:	8b 81       	ldd	r24, Y+3	; 0x03
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	02 2e       	mov	r0, r18
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_EnuTogPin+0xfa>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	0a 94       	dec	r0
 82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_EnuTogPin+0xf6>
 82e:	84 27       	eor	r24, r20
 830:	8c 93       	st	X, r24
								break;
					 }
			Local_u8Errorstate=ES_OK;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	89 83       	std	Y+1, r24	; 0x01
 836:	02 c0       	rjmp	.+4      	; 0x83c <DIO_EnuTogPin+0x10c>
		}
	else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	89 83       	std	Y+1, r24	; 0x01
	    }


	return Local_u8Errorstate;
 83c:	89 81       	ldd	r24, Y+1	; 0x01
}
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	08 95       	ret

0000084e <DIO_EnuGetPinValue>:

/*******************************************************************************/

ES_t DIO_EnuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID,u8 * Copy_u8Value){
 84e:	df 93       	push	r29
 850:	cf 93       	push	r28
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	27 97       	sbiw	r28, 0x07	; 7
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	8a 83       	std	Y+2, r24	; 0x02
 864:	6b 83       	std	Y+3, r22	; 0x03
 866:	5d 83       	std	Y+5, r21	; 0x05
 868:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8Errorstate=ES_NOK;
 86a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value!=NULL)
 86c:	8c 81       	ldd	r24, Y+4	; 0x04
 86e:	9d 81       	ldd	r25, Y+5	; 0x05
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	09 f4       	brne	.+2      	; 0x876 <__stack+0x17>
 874:	7e c0       	rjmp	.+252    	; 0x972 <__stack+0x113>
	{
		if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_Pin7){
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	85 34       	cpi	r24, 0x45	; 69
 87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
 87c:	77 c0       	rjmp	.+238    	; 0x96c <__stack+0x10d>
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	88 30       	cpi	r24, 0x08	; 8
 882:	08 f0       	brcs	.+2      	; 0x886 <__stack+0x27>
 884:	73 c0       	rjmp	.+230    	; 0x96c <__stack+0x10d>
				 switch(Copy_u8PortID)
 886:	8a 81       	ldd	r24, Y+2	; 0x02
 888:	28 2f       	mov	r18, r24
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	3f 83       	std	Y+7, r19	; 0x07
 88e:	2e 83       	std	Y+6, r18	; 0x06
 890:	4e 81       	ldd	r20, Y+6	; 0x06
 892:	5f 81       	ldd	r21, Y+7	; 0x07
 894:	42 34       	cpi	r20, 0x42	; 66
 896:	51 05       	cpc	r21, r1
 898:	59 f1       	breq	.+86     	; 0x8f0 <__stack+0x91>
 89a:	8e 81       	ldd	r24, Y+6	; 0x06
 89c:	9f 81       	ldd	r25, Y+7	; 0x07
 89e:	83 34       	cpi	r24, 0x43	; 67
 8a0:	91 05       	cpc	r25, r1
 8a2:	34 f4       	brge	.+12     	; 0x8b0 <__stack+0x51>
 8a4:	2e 81       	ldd	r18, Y+6	; 0x06
 8a6:	3f 81       	ldd	r19, Y+7	; 0x07
 8a8:	21 34       	cpi	r18, 0x41	; 65
 8aa:	31 05       	cpc	r19, r1
 8ac:	69 f0       	breq	.+26     	; 0x8c8 <__stack+0x69>
 8ae:	5b c0       	rjmp	.+182    	; 0x966 <__stack+0x107>
 8b0:	4e 81       	ldd	r20, Y+6	; 0x06
 8b2:	5f 81       	ldd	r21, Y+7	; 0x07
 8b4:	43 34       	cpi	r20, 0x43	; 67
 8b6:	51 05       	cpc	r21, r1
 8b8:	79 f1       	breq	.+94     	; 0x918 <__stack+0xb9>
 8ba:	8e 81       	ldd	r24, Y+6	; 0x06
 8bc:	9f 81       	ldd	r25, Y+7	; 0x07
 8be:	84 34       	cpi	r24, 0x44	; 68
 8c0:	91 05       	cpc	r25, r1
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <__stack+0x67>
 8c4:	3d c0       	rjmp	.+122    	; 0x940 <__stack+0xe1>
 8c6:	4f c0       	rjmp	.+158    	; 0x966 <__stack+0x107>
				 {
					case 'A':
						*Copy_u8Value=GET_BIT(PINA,Copy_u8PinID);
 8c8:	e9 e3       	ldi	r30, 0x39	; 57
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	28 2f       	mov	r18, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	88 2f       	mov	r24, r24
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	a9 01       	movw	r20, r18
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	55 95       	asr	r21
 8de:	47 95       	ror	r20
 8e0:	8a 95       	dec	r24
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
 8e4:	ca 01       	movw	r24, r20
 8e6:	81 70       	andi	r24, 0x01	; 1
 8e8:	ec 81       	ldd	r30, Y+4	; 0x04
 8ea:	fd 81       	ldd	r31, Y+5	; 0x05
 8ec:	80 83       	st	Z, r24
 8ee:	3b c0       	rjmp	.+118    	; 0x966 <__stack+0x107>
						break;
					case 'B':
						*Copy_u8Value=GET_BIT(PINB,Copy_u8PinID);
 8f0:	e6 e3       	ldi	r30, 0x36	; 54
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	28 2f       	mov	r18, r24
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	88 2f       	mov	r24, r24
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	a9 01       	movw	r20, r18
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
 904:	55 95       	asr	r21
 906:	47 95       	ror	r20
 908:	8a 95       	dec	r24
 90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
 90c:	ca 01       	movw	r24, r20
 90e:	81 70       	andi	r24, 0x01	; 1
 910:	ec 81       	ldd	r30, Y+4	; 0x04
 912:	fd 81       	ldd	r31, Y+5	; 0x05
 914:	80 83       	st	Z, r24
 916:	27 c0       	rjmp	.+78     	; 0x966 <__stack+0x107>
						break;
					case 'C':
						*Copy_u8Value=GET_BIT(PINC,Copy_u8PinID);
 918:	e3 e3       	ldi	r30, 0x33	; 51
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	28 2f       	mov	r18, r24
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	88 2f       	mov	r24, r24
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	a9 01       	movw	r20, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	55 95       	asr	r21
 92e:	47 95       	ror	r20
 930:	8a 95       	dec	r24
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	ca 01       	movw	r24, r20
 936:	81 70       	andi	r24, 0x01	; 1
 938:	ec 81       	ldd	r30, Y+4	; 0x04
 93a:	fd 81       	ldd	r31, Y+5	; 0x05
 93c:	80 83       	st	Z, r24
 93e:	13 c0       	rjmp	.+38     	; 0x966 <__stack+0x107>
						break;
					case 'D':
						*Copy_u8Value=GET_BIT(PIND,Copy_u8PinID);
 940:	e0 e3       	ldi	r30, 0x30	; 48
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	28 2f       	mov	r18, r24
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	8b 81       	ldd	r24, Y+3	; 0x03
 94c:	88 2f       	mov	r24, r24
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	a9 01       	movw	r20, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0xf9>
 954:	55 95       	asr	r21
 956:	47 95       	ror	r20
 958:	8a 95       	dec	r24
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0xf5>
 95c:	ca 01       	movw	r24, r20
 95e:	81 70       	andi	r24, 0x01	; 1
 960:	ec 81       	ldd	r30, Y+4	; 0x04
 962:	fd 81       	ldd	r31, Y+5	; 0x05
 964:	80 83       	st	Z, r24
						break;
				 }
				 Local_u8Errorstate=ES_OK;
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	89 83       	std	Y+1, r24	; 0x01
 96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
			}
		else{
				Local_u8Errorstate=ES_OUT_OF_RANGE;
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x117>
		    }
	}
	else
	{
		Local_u8Errorstate=ES_PNULL;
 972:	82 e0       	ldi	r24, 0x02	; 2
 974:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8Errorstate;
 976:	89 81       	ldd	r24, Y+1	; 0x01
}
 978:	27 96       	adiw	r28, 0x07	; 7
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	08 95       	ret

0000098a <KPD_u8GetPressedKey>:
#include "Keypad_Config.h"
#include "Keypad_Interface.h"
#include "Keypad_Private.h"


u8 KPD_u8GetPressedKey(void){
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	cd b7       	in	r28, 0x3d	; 61
 990:	de b7       	in	r29, 0x3e	; 62
 992:	6a 97       	sbiw	r28, 0x1a	; 26
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
u8 Local_u8PressedKey=Key_NPresedKey;
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	8b 83       	std	Y+3, r24	; 0x03
static u8 Local_u8KPDColumArrPort[NUM_COLUMS]={KPD_COLUMN0_PORT,KPD_COLUMN1_PORT,KPD_COLUMN2_PORT,KPD_COLUMN3_PORT};

static u8 Local_u8KPDRowsArrPins[NUM_COLUMS]= {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
static u8 Local_u8KPDRowsArrPort[NUM_COLUMS]= {KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};

u8 Local_u8CounterRows=0;
 9a2:	1a 82       	std	Y+2, r1	; 0x02
u8 Local_u8CounterColums=0;
 9a4:	19 82       	std	Y+1, r1	; 0x01

u8 Local_u8PinState;


u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
 9a6:	ce 01       	movw	r24, r28
 9a8:	05 96       	adiw	r24, 0x05	; 5
 9aa:	9f 8b       	std	Y+23, r25	; 0x17
 9ac:	8e 8b       	std	Y+22, r24	; 0x16
 9ae:	e0 e7       	ldi	r30, 0x70	; 112
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	f9 8f       	std	Y+25, r31	; 0x19
 9b4:	e8 8f       	std	Y+24, r30	; 0x18
 9b6:	f0 e1       	ldi	r31, 0x10	; 16
 9b8:	fa 8f       	std	Y+26, r31	; 0x1a
 9ba:	e8 8d       	ldd	r30, Y+24	; 0x18
 9bc:	f9 8d       	ldd	r31, Y+25	; 0x19
 9be:	00 80       	ld	r0, Z
 9c0:	88 8d       	ldd	r24, Y+24	; 0x18
 9c2:	99 8d       	ldd	r25, Y+25	; 0x19
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	99 8f       	std	Y+25, r25	; 0x19
 9c8:	88 8f       	std	Y+24, r24	; 0x18
 9ca:	ee 89       	ldd	r30, Y+22	; 0x16
 9cc:	ff 89       	ldd	r31, Y+23	; 0x17
 9ce:	00 82       	st	Z, r0
 9d0:	8e 89       	ldd	r24, Y+22	; 0x16
 9d2:	9f 89       	ldd	r25, Y+23	; 0x17
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	9f 8b       	std	Y+23, r25	; 0x17
 9d8:	8e 8b       	std	Y+22, r24	; 0x16
 9da:	9a 8d       	ldd	r25, Y+26	; 0x1a
 9dc:	91 50       	subi	r25, 0x01	; 1
 9de:	9a 8f       	std	Y+26, r25	; 0x1a
 9e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
 9e2:	ee 23       	and	r30, r30
 9e4:	51 f7       	brne	.-44     	; 0x9ba <KPD_u8GetPressedKey+0x30>
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
 9e6:	19 82       	std	Y+1, r1	; 0x01
 9e8:	7c c0       	rjmp	.+248    	; 0xae2 <KPD_u8GetPressedKey+0x158>
{
	DIO_EnuSetPinortValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8LOW);
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	fc 01       	movw	r30, r24
 9f2:	e8 59       	subi	r30, 0x98	; 152
 9f4:	ff 4f       	sbci	r31, 0xFF	; 255
 9f6:	20 81       	ld	r18, Z
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	88 2f       	mov	r24, r24
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	e4 59       	subi	r30, 0x94	; 148
 a02:	ff 4f       	sbci	r31, 0xFF	; 255
 a04:	90 81       	ld	r25, Z
 a06:	82 2f       	mov	r24, r18
 a08:	69 2f       	mov	r22, r25
 a0a:	40 e0       	ldi	r20, 0x00	; 0
 a0c:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_EnuSetPinortValue>

	for( Local_u8CounterRows=0; Local_u8CounterRows<NUM_ROWS; Local_u8CounterRows++)
 a10:	1a 82       	std	Y+2, r1	; 0x02
 a12:	4d c0       	rjmp	.+154    	; 0xaae <KPD_u8GetPressedKey+0x124>
		{
			DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);
 a14:	8a 81       	ldd	r24, Y+2	; 0x02
 a16:	88 2f       	mov	r24, r24
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	fc 01       	movw	r30, r24
 a1c:	e0 5a       	subi	r30, 0xA0	; 160
 a1e:	ff 4f       	sbci	r31, 0xFF	; 255
 a20:	40 81       	ld	r20, Z
 a22:	8a 81       	ldd	r24, Y+2	; 0x02
 a24:	88 2f       	mov	r24, r24
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	fc 01       	movw	r30, r24
 a2a:	ec 59       	subi	r30, 0x9C	; 156
 a2c:	ff 4f       	sbci	r31, 0xFF	; 255
 a2e:	90 81       	ld	r25, Z
 a30:	9e 01       	movw	r18, r28
 a32:	2c 5f       	subi	r18, 0xFC	; 252
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	84 2f       	mov	r24, r20
 a38:	69 2f       	mov	r22, r25
 a3a:	a9 01       	movw	r20, r18
 a3c:	0e 94 27 04 	call	0x84e	; 0x84e <DIO_EnuGetPinValue>

			if(DIO_u8LOW==Local_u8PinState){
 a40:	8c 81       	ldd	r24, Y+4	; 0x04
 a42:	88 23       	and	r24, r24
 a44:	89 f5       	brne	.+98     	; 0xaa8 <KPD_u8GetPressedKey+0x11e>
				Local_u8PressedKey=Local_u8KPDArr[Local_u8CounterRows][Local_u8CounterColums];
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	28 2f       	mov	r18, r24
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	89 81       	ldd	r24, Y+1	; 0x01
 a4e:	48 2f       	mov	r20, r24
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	ce 01       	movw	r24, r28
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	82 0f       	add	r24, r18
 a60:	93 1f       	adc	r25, r19
 a62:	84 0f       	add	r24, r20
 a64:	95 1f       	adc	r25, r21
 a66:	fc 01       	movw	r30, r24
 a68:	34 96       	adiw	r30, 0x04	; 4
 a6a:	80 81       	ld	r24, Z
 a6c:	8b 83       	std	Y+3, r24	; 0x03
 a6e:	16 c0       	rjmp	.+44     	; 0xa9c <KPD_u8GetPressedKey+0x112>

				/* Polling busy Waiting until event */
				while(DIO_u8LOW==Local_u8PinState){
					DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);
 a70:	8a 81       	ldd	r24, Y+2	; 0x02
 a72:	88 2f       	mov	r24, r24
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	fc 01       	movw	r30, r24
 a78:	e0 5a       	subi	r30, 0xA0	; 160
 a7a:	ff 4f       	sbci	r31, 0xFF	; 255
 a7c:	40 81       	ld	r20, Z
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	88 2f       	mov	r24, r24
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	fc 01       	movw	r30, r24
 a86:	ec 59       	subi	r30, 0x9C	; 156
 a88:	ff 4f       	sbci	r31, 0xFF	; 255
 a8a:	90 81       	ld	r25, Z
 a8c:	9e 01       	movw	r18, r28
 a8e:	2c 5f       	subi	r18, 0xFC	; 252
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	84 2f       	mov	r24, r20
 a94:	69 2f       	mov	r22, r25
 a96:	a9 01       	movw	r20, r18
 a98:	0e 94 27 04 	call	0x84e	; 0x84e <DIO_EnuGetPinValue>

			if(DIO_u8LOW==Local_u8PinState){
				Local_u8PressedKey=Local_u8KPDArr[Local_u8CounterRows][Local_u8CounterColums];

				/* Polling busy Waiting until event */
				while(DIO_u8LOW==Local_u8PinState){
 a9c:	8c 81       	ldd	r24, Y+4	; 0x04
 a9e:	88 23       	and	r24, r24
 aa0:	39 f3       	breq	.-50     	; 0xa70 <KPD_u8GetPressedKey+0xe6>
					DIO_EnuGetPinValue(Local_u8KPDRowsArrPort[Local_u8CounterRows],Local_u8KPDRowsArrPins[Local_u8CounterRows],&Local_u8PinState);

				}
				return Local_u8PressedKey;
 aa2:	fb 81       	ldd	r31, Y+3	; 0x03
 aa4:	fd 8b       	std	Y+21, r31	; 0x15
 aa6:	23 c0       	rjmp	.+70     	; 0xaee <KPD_u8GetPressedKey+0x164>
u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
{
	DIO_EnuSetPinortValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8LOW);

	for( Local_u8CounterRows=0; Local_u8CounterRows<NUM_ROWS; Local_u8CounterRows++)
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
 aaa:	8f 5f       	subi	r24, 0xFF	; 255
 aac:	8a 83       	std	Y+2, r24	; 0x02
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	84 30       	cpi	r24, 0x04	; 4
 ab2:	08 f4       	brcc	.+2      	; 0xab6 <KPD_u8GetPressedKey+0x12c>
 ab4:	af cf       	rjmp	.-162    	; 0xa14 <KPD_u8GetPressedKey+0x8a>

				}
				return Local_u8PressedKey;
			}
		}
	DIO_EnuSetPinortValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8HIGH );
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
 ab8:	88 2f       	mov	r24, r24
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	fc 01       	movw	r30, r24
 abe:	e8 59       	subi	r30, 0x98	; 152
 ac0:	ff 4f       	sbci	r31, 0xFF	; 255
 ac2:	20 81       	ld	r18, Z
 ac4:	89 81       	ldd	r24, Y+1	; 0x01
 ac6:	88 2f       	mov	r24, r24
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	fc 01       	movw	r30, r24
 acc:	e4 59       	subi	r30, 0x94	; 148
 ace:	ff 4f       	sbci	r31, 0xFF	; 255
 ad0:	90 81       	ld	r25, Z
 ad2:	82 2f       	mov	r24, r18
 ad4:	69 2f       	mov	r22, r25
 ad6:	41 e0       	ldi	r20, 0x01	; 1
 ad8:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_EnuSetPinortValue>

u8 Local_u8PinState;


u8 Local_u8KPDArr[NUM_ROWS][NUM_COLUMS]=KPD_ARR_VAL;
for( Local_u8CounterColums=0; Local_u8CounterColums<NUM_COLUMS; Local_u8CounterColums++)
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	8f 5f       	subi	r24, 0xFF	; 255
 ae0:	89 83       	std	Y+1, r24	; 0x01
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	84 30       	cpi	r24, 0x04	; 4
 ae6:	08 f4       	brcc	.+2      	; 0xaea <KPD_u8GetPressedKey+0x160>
 ae8:	80 cf       	rjmp	.-256    	; 0x9ea <KPD_u8GetPressedKey+0x60>
			}
		}
	DIO_EnuSetPinortValue(Local_u8KPDColumArrPort[Local_u8CounterColums],Local_u8KPDColumArrPins[Local_u8CounterColums],DIO_u8HIGH );

}
return Local_u8PressedKey;
 aea:	8b 81       	ldd	r24, Y+3	; 0x03
 aec:	8d 8b       	std	Y+21, r24	; 0x15
 aee:	8d 89       	ldd	r24, Y+21	; 0x15
}
 af0:	6a 96       	adiw	r28, 0x1a	; 26
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	cf 91       	pop	r28
 afe:	df 91       	pop	r29
 b00:	08 95       	ret

00000b02 <main>:
#include "DIO_Interface.h"

//#include "CLCD_Interface.h"

#include"Keypad_Interface.h"
void main(void){
 b02:	df 93       	push	r29
 b04:	cf 93       	push	r28
 b06:	0f 92       	push	r0
 b08:	cd b7       	in	r28, 0x3d	; 61
 b0a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Key=0xff;
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	89 83       	std	Y+1, r24	; 0x01
	DIO_EnuInit();
 b10:	0e 94 41 00 	call	0x82	; 0x82 <DIO_EnuInit>
//	CLCD_EnuInit();
	while(1){
		do{
		Local_u8Key=KPD_u8GetPressedKey();
 b14:	0e 94 c5 04 	call	0x98a	; 0x98a <KPD_u8GetPressedKey>
 b18:	89 83       	std	Y+1, r24	; 0x01

		}while(Local_u8Key==0XFF);
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	8f 3f       	cpi	r24, 0xFF	; 255
 b1e:	d1 f3       	breq	.-12     	; 0xb14 <main+0x12>
		DIO_EnuSetPinortValue(DIO_u8PORTD,DIO_u8Pin0,DIO_u8HIGH);
 b20:	84 e4       	ldi	r24, 0x44	; 68
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	41 e0       	ldi	r20, 0x01	; 1
 b26:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_EnuSetPinortValue>
 b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <main+0x12>

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
